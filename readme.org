* research-hackage

[[https://hackage.haskell.org/package/chart-hackage][file:https://img.shields.io/hackage/v/research-hackage.svg]] [[https://github.com/tonyday567/chart-hackage/actions?query=workflow%3Ahaskell-ci][file:https://github.com/tonyday567/research-hackage/workflows/haskell-ci/badge.svg]]

This repo is an experiment in:

- reading Haskell package information from =~/.cabal/packages/hackage.haskell.org/01-index.tar=
- parsing cabal details using [[https://hackage.haskell.org/package/flatparse-0.2.2.0][flatparse]] and [[https://hackage.haskell.org/package/streamly][streamly]].
- creating dependency charts and graphing them with graphviz via [[https://github.com/tonyday567/dotparse][dotparse]] and [[https://hackage.haskell.org/package/chart-svg][chart-svg]].
- using org-mode for rapid Haskell development.

* code

** setup & development process

Notes on how to run ghci within org-mode are available at [[https://github.com/tonyday567/checklist#babel][checklist: How I start Haskell.]]

#+begin_src haskell
:set prompt "> "
:set -XOverloadedStrings
:set -Wno-type-defaults
putStrLn "ok"
#+end_src

#+RESULTS:
: ok

#+begin_src haskell
:r
:set -Wno-deprecations
import Research.Hackage
import qualified Streamly.Prelude as S
import qualified Streamly.Internal.Data.Unfold as Unfold
import Data.Function
import Streamly.External.Archive
import Data.Either
import qualified Data.ByteString.Char8 as C
import Data.Bifunctor
import qualified Data.Map.Strict as Map
import DotParse
import FlatParse.Basic qualified as FP
import Algebra.Graph
import qualified Algebra.Graph.ToGraph as ToGraph
import Data.Foldable
import Chart
import Data.String.Interpolate
import Optics.Core
putStrLn "ok"
#+end_src

#+RESULTS:
: ok

** ToDo directory listing

#+begin_src haskell :results output
import System.Directory
import Control.Monad
import Data.List
#+end_src

#+RESULTS:
: <interactive>:29:8: warning: [-Wcompat-unqualified-imports]
:     To ensure compatibility with future core libraries changes
:     imports to Data.List should be
:     either qualified or have an explicit import list.

#+begin_src haskell :results output
h <- getHomeDirectory & fmap (<> "/haskell")
ds <- getDirectoryContents h
ds' = filter (\x -> x /= "." && x /= "..") ds
ds'' <- filterM doesDirectoryExist $ (\x -> h <> "/" <> x) <$> ds'
fs <- mapM (\x -> (x,) <$> getDirectoryContents x) ds''
cabals = mconcat $ fmap ((\(d,fs)-> (\f -> d <> "/" <> f) <$> fs) . second (filter (isSuffixOf ".cabal"))) fs
#+end_src

#+RESULTS:
: <interactive>:36:31: warning: [-Wname-shadowing]
:     This binding for ‘fs’ shadows the existing binding
:       defined at <interactive>:35:1





#+begin_src haskell :results output
cabals
#+end_src

#+RESULTS:
: ["/Users/tonyday/haskell/numhask/numhask.cabal","/Users/tonyday/haskell/mealy/mealy.cabal","/Users/tonyday/haskell/box/box.cabal","/Users/tonyday/haskell/formatn/formatn.cabal","/Users/tonyday/haskell/prettychart/prettychart.cabal","/Users/tonyday/haskell/code/code.cabal","/Users/tonyday/haskell/poker-fold/poker-fold.cabal","/Users/tonyday/haskell/numhask-space/numhask-space.cabal","/Users/tonyday/haskell/iqfeed/iqfeed.cabal","/Users/tonyday/haskell/box-socket/box-socket.cabal","/Users/tonyday/haskell/numhask-array/numhask-array.cabal","/Users/tonyday/haskell/euler/eulerproject.cabal","/Users/tonyday/haskell/tonyday567/tonyday567.cabal","/Users/tonyday/haskell/foo/foo.cabal","/Users/tonyday/haskell/web-rep/web-rep.cabal","/Users/tonyday/haskell/baz/baz.cabal","/Users/tonyday/haskell/dotparse/dotparse.cabal","/Users/tonyday/haskell/perf/perf.cabal","/Users/tonyday/haskell/anal/anal.cabal","/Users/tonyday/haskell/research-hackage/research-hackage.cabal","/Users/tonyday/haskell/chart-svg/chart-svg.cabal","/Users/tonyday/haskell/ephemeral/ephemeral.cabal"]


Cabal file contents in the haskell directory:

#+begin_src haskell :results output
haskellStream = S.unfold Unfold.fromListM ((\x -> (x,) <$> readFile x) <$> cabals)
:t haskellStream
#+end_src

#+RESULTS:
: haskellStream :: S.IsStream t =
: t IO (FilePath, String)

 #+begin_src haskell :results output
s = fmap (first C.pack . second C.pack) haskellStream
 #+end_src

#+RESULTS:

package count

 #+begin_src haskell :results output
s & S.map (const 1) & S.sum
 #+end_src

#+RESULTS:
: 21

files

#+begin_src haskell :results output
fields <- S.toList $ fmap (fromRight undefined . readFields . snd) s
#+end_src

#+RESULTS:

#+begin_src haskell :results output
fmap length fields
#+end_src

#+RESULTS:
: [20,18,20,17,19,20,21,20,24,17,20,18,18,20,18,18,21,17,18,21,17]


 #+begin_src haskell :results output
count_ $ mconcat $ fmap (fmap names) fields
 #+end_src

#+RESULTS:
: fromList [("author",20),("bug-reports",20),("build-type",21),("cabal-version",21),("category",21),("common",41),("copyright",20),("description",21),("executable",14),("extra-doc-files",10),("extra-source-files",1),("homepage",20),("library",20),("license",20),("license-file",8),("maintainer",21),("name",21),("source-repository",21),("stability",1),("synopsis",21),("test-suite",3),("tested-with",15),("version",21)]

*** ToDo questions

- which cabal has no author?
- common?
- extra-source-files
- stability
- test-suite * 3

finding exclusions

#+begin_src haskell :results output
S.toList $ fmap fst $ S.filter (not . any ((=="copyright") . names) . snd) $ fmap (second (fromRight undefined . readFields)) s
#+end_src

#+RESULTS:
: ["/Users/tonyday/haskell/web-rep/web-rep.cabal"]

looking at single fields

#+begin_src haskell
S.toList $ fmap (second (mconcat . fmap (fieldValue "copyright"))) $ fmap (second (fromRight undefined . readFields)) s
#+end_src

#+RESULTS:
| /Users/tonyday/haskell/numhask/numhask.cabal                   | (Tony Day)                  |
| /Users/tonyday/haskell/mealy/mealy.cabal                       | (Tony Day (c) 2013 - 2022)  |
| /Users/tonyday/haskell/box/box.cabal                           | (Tony Day (c) 2017)         |
| /Users/tonyday/haskell/formatn/formatn.cabal                   | (2016 Tony Day)             |
| /Users/tonyday/haskell/prettychart/prettychart.cabal           | (Tony Day (c) 2023)         |
| /Users/tonyday/haskell/code/code.cabal                         | (Copyrite, Tony Day, 2023-) |
| /Users/tonyday/haskell/poker-fold/poker-fold.cabal             | (Tony Day (c) 2020-2023)    |
| /Users/tonyday/haskell/numhask-space/numhask-space.cabal       | (Tony Day)                  |
| /Users/tonyday/haskell/iqfeed/iqfeed.cabal                     | (Tony Day 2014-2021)        |
| /Users/tonyday/haskell/box-socket/box-socket.cabal             | (Tony Day (c) AfterTimes)   |
| /Users/tonyday/haskell/numhask-array/numhask-array.cabal       | (Tony Day)                  |
| /Users/tonyday/haskell/euler/eulerproject.cabal                | (Tony Day (c) AfterTimes)   |
| /Users/tonyday/haskell/tonyday567/tonyday567.cabal             | (Tony Day (c) AfterTimes)   |
| /Users/tonyday/haskell/foo/foo.cabal                           | (Copyrite, Tony Day, 2023-) |
| /Users/tonyday/haskell/web-rep/web-rep.cabal                   | nil                         |
| /Users/tonyday/haskell/dotparse/dotparse.cabal                 | (Tony Day (c) 2022)         |
| /Users/tonyday/haskell/perf/perf.cabal                         | (Tony Day)                  |
| /Users/tonyday/haskell/anal/anal.cabal                         | (Copyrite, Tony Day, 2023-) |
| /Users/tonyday/haskell/research-hackage/research-hackage.cabal | (Tony Day (c) 2022)         |
| /Users/tonyday/haskell/chart-svg/chart-svg.cabal               | (Tony Day (c) 2017)         |
| /Users/tonyday/haskell/ephemeral/ephemeral.cabal               | (Tony Day (c) AfterTimes)   |

 #+begin_src haskell :results output
:t count
 #+end_src

#+RESULTS:
: count
:   :: (Applicative m, Ord a) =>
:      Streamly.Internal.Data.Fold.Type.Fold m a (Map.Map a Int)


#+begin_src haskell :results output
yearList = [("numhask",2016),("mealy",2013),("box",2017),("formatn",2016),("prettychart",2023),("code",2023),("poker-fold",2020),("numhask-space",2016),("iqfeed",2014),("box-socket",2017),("numhask-array",2016),("euler",2023),("tonyday567",2020),("foo",2023),("web-rep",2015),("dotparse",2022),("perf",2018),("anal",2023),("research-hackage",2022),("chart-svg",2017),("ephemeral",2020)]
:t yearList :: [(String, Int)]
#+end_src

#+RESULTS:
: yearList :: [(String, Int)] :: [(String, Int)]

#+begin_src haskell :results output
license a y = [i|

Copyright #{a} (c) #{y}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    ,* Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    ,* Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    ,* Neither the name of #{a} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
|]
#+end_src

#+RESULTS:
#+begin_example
<interactive>:48:18: error:
    parse error (possibly incorrect indentation or mismatched brackets)
<interactive>:50:12: error: parse error on input ‘{’
<interactive>:52:21: error:
    parse error (possibly incorrect indentation or mismatched brackets)
<interactive>:54:24: error: parse error on input ‘in’
<interactive>:55:19: error: parse error on input ‘permitted’
<interactive>:57:5: error: parse error on input ‘*’
<interactive>:58:20: error: parse error on input ‘list’
<interactive>:60:5: error: parse error on input ‘*’
<interactive>:61:23: error: parse error on input ‘,’
<interactive>:62:18: error: parse error on input ‘in’
<interactive>:63:29: error:
    parse error (possibly incorrect indentation or mismatched brackets)
<interactive>:65:5: error: parse error on input ‘*’
<interactive>:66:7: error:
    Variable not in scope:
      contributors
        :: t0
           -
t1
           -
t2
           -
((s0 -
a0) -
Getter s0 a0)
           -
t3
           -
(t4 Bool -
Bool)
           -
t5
           -
t6
           -
t7
           -
t

<interactive>:66:20: error:
    Variable not in scope: may
    Suggested fix:
      Perhaps use one of these:
        ‘map’ (imported from Data.List),
        ‘C.map’ (imported from Data.ByteString.Char8),
        ‘Set.map’ (imported from Data.Set)

<interactive>:66:24: error:
    Variable not in scope: be
    Suggested fix:
      Perhaps use one of these:
        ‘re’ (imported from Optics.Core), ‘te’ (imported from Chart)

<interactive>:66:27: error: Variable not in scope: used

<interactive>:66:35: error: Variable not in scope: endorse

<interactive>:66:46: error: Variable not in scope: promote

<interactive>:66:54: error:
    Variable not in scope: products
    Suggested fix:
      Perhaps use one of these:
        ‘product’ (imported from Data.Foldable),
        ‘S.product’ (imported from Streamly.Prelude),
        ‘productOf’ (imported from Optics.Core)

<interactive>:66:63: error: Variable not in scope: derived
<interactive>:67:68: error:
    parse error (possibly incorrect indentation or mismatched brackets)
<interactive>:69:1: error:
    Data constructor not in scope:
      THIS :: t0 -
t1 -
t2 -
t3 -
t4 -
t5 -
t6 -
t7 -
t8 -
t

<interactive>:69:6: error: Data constructor not in scope: SOFTWARE

<interactive>:69:15: error:
    Data constructor not in scope: IS
    Suggested fix: Perhaps use ‘ID’ (imported from DotParse)

<interactive>:69:18: error: Data constructor not in scope: PROVIDED

<interactive>:69:27: error: Data constructor not in scope: BY

<interactive>:69:30: error: Data constructor not in scope: THE

<interactive>:69:34: error:
    Data constructor not in scope: COPYRIGHT

<interactive>:69:44: error: Data constructor not in scope: HOLDERS

<interactive>:69:52: error: Data constructor not in scope: AND

<interactive>:69:56: error:
    Data constructor not in scope: CONTRIBUTORS
<interactive>:70:46: error: parse error on input ‘,’
<interactive>:71:11: error: parse error on input ‘,’
<interactive>:72:1: error:
    Data constructor not in scope: A :: t5 -
t6 -
t7 -
t8 -
b0 -
c

<interactive>:72:3: error:
    Data constructor not in scope: PARTICULAR

<interactive>:72:14: error: Data constructor not in scope: PURPOSE

<interactive>:72:22: error: Data constructor not in scope: ARE

<interactive>:72:26: error:
    Data constructor not in scope: DISCLAIMED

<interactive>:72:38: error:
    Data constructor not in scope:
      IN :: t0 -
t1 -
t2 -
t3 -
t4 -
a -
b0
    Suggested fix: Perhaps use ‘ID’ (imported from DotParse)

<interactive>:72:41: error: Data constructor not in scope: NO

<interactive>:72:44: error: Data constructor not in scope: EVENT

<interactive>:72:50: error: Data constructor not in scope: SHALL

<interactive>:72:56: error: Data constructor not in scope: THE

<interactive>:72:60: error:
    Data constructor not in scope: COPYRIGHT
<interactive>:73:47: error: parse error on input ‘,’
<interactive>:74:8: error: parse error on input ‘,’
<interactive>:75:11: error: parse error on input ‘,’
<interactive>:76:5: error: parse error on input ‘,’
<interactive>:77:20: error: parse error on input ‘,’
<interactive>:78:2: error:
    Data constructor not in scope:
      INCLUDING
        :: t0
           -
t1 -
t2 -
t3 -
t4 -
t5 -
t6 -
t7 -
t8 -
t9 -
t10 -
t

<interactive>:78:12: error:
    Data constructor not in scope: NEGLIGENCE

<interactive>:78:23: error:
    Data constructor not in scope: OR
    Suggested fix: Perhaps use ‘FP.OK’ (imported from FlatParse.Basic)

<interactive>:78:26: error:
    Data constructor not in scope: OTHERWISE

<interactive>:78:37: error: Data constructor not in scope: ARISING

<interactive>:78:45: error:
    Data constructor not in scope: IN
    Suggested fix: Perhaps use ‘ID’ (imported from DotParse)

<interactive>:78:48: error: Data constructor not in scope: ANY

<interactive>:78:52: error: Data constructor not in scope: WAY

<interactive>:78:56: error: Data constructor not in scope: OUT

<interactive>:78:60: error:
    Data constructor not in scope: OF
    Suggested fix: Perhaps use ‘FP.OK’ (imported from FlatParse.Basic)

<interactive>:78:63: error: Data constructor not in scope: THE

<interactive>:78:67: error: Data constructor not in scope: USE
<interactive>:79:17: error: parse error on input ‘,’
<interactive>:80:1: error: parse error on input ‘|]’
#+end_example





** archive

*** development loop


The development loop largely starts with re-establishment of state by running the code below, which represents milestones in parsing cabal index data, and (eventual) reification in ~Research.Hackage~.

#+begin_src haskell :results output
vlibs <- Map.delete "acme-everything" <$> validLatestLibs
deps = fmap (fromRight undefined . parseDeps . mconcat . mconcat . rawBuildDeps . snd) vlibs
bdnames <- fmap (fmap fst) $ fmap Map.toList $ S.fold count $ S.concatMap S.fromList $ S.fromList $ fmap snd $ Map.toList deps
depsExclude = filter (not . (`elem` (Map.keys vlibs))) bdnames
vdeps = Map.filter (not . null) $ fmap (filter (not . (`elem` depsExclude))) deps
depG = stars (Map.toList vdeps)
#+end_src

#+RESULTS:

#+begin_src haskell :results output :exports both
vertexCount depG
edgeCount depG
#+end_src

#+RESULTS:
: 15135
: 109900

depG is an algebraic-graph of the latest cabal library package names as the vertexes and their dependencies as the edges.



archive is located at =~/.cabal/packages/hackage.haskell.org/01-index.tar= and contains @ 290k unique entries (May 2022).

All pathNames exist, all file types are regular and there are no utf8 issues with pathNames
so we use the header pathName to roll up the archive

package count:

#+begin_src haskell :results output :exports both
:t groupByPathName
:t Unfold.take 10000000 archive
:t groupByPathName (Unfold.take 10000000 archive)
packageStream & S.map (const 1) & S.sum
#+end_src

#+RESULTS:
: groupByPathName
:   :: S.IsStream t =>
:      Unfold IO a (Either Header ByteString)
:      -> t IO (ByteString, ByteString)
: Unfold.take 10000000 archive
:   :: Unfold IO Void (Either Header ByteString)
: groupByPathName (Unfold.take 10000000 archive)
:   :: S.IsStream t => t IO (ByteString, ByteString)
: 303794

** package names

*** weird name checks

#+begin_src haskell :results output :exports both
S.toList $ S.filter ((/= Just (Just FileTypeRegular)) . fmap fileType) $ S.take 10 $ fmap fst $ groupByHeader (Unfold.take 10000000 archive)

S.toList $ S.filter (\x -> fmap pathName x /= fmap pathNameUtf8 x) $ S.take 10 $ fmap fst $ groupByHeader (Unfold.take 10000000 archive)

S.toList $ S.filter (\x -> fmap pathName x == Nothing) $ S.take 10 $ fmap fst $ groupByHeader (Unfold.take 10000000 archive)
#+end_src

#+RESULTS:
: []
: > []
: > []

*** empty content

The first 10 package names

#+begin_src haskell :exports both
S.toList $ S.take 10 $ fmap fst packageStream
#+end_src

#+RESULTS:
| iconv/0.2/iconv.cabal | Crypto/3.0.3/Crypto.cabal | HDBC/1.0.1/HDBC.cabal | HDBC-odbc/1.0.1.0/HDBC-odbc.cabal | HDBC-postgresql/1.0.1.0/HDBC-postgresql.cabal | HDBC-sqlite3/1.0.1.0/HDBC-sqlite3.cabal | darcs-graph/0.1/darcs-graph.cabal | hask-home/2006.3.23/hask-home.cabal | hmp3/1.1/hmp3.cabal | lambdabot/4.0/lambdabot.cabal |

Some have no cabal file content, but these are =preferred-version= types.

#+begin_src haskell :exports both
S.length $ S.filter ((=="") . snd) $ packageStream
#+end_src

#+RESULTS:
: 43

*** types of packages

package path names are either preferred-versions, .cabal or package.json

#+begin_src haskell :exports both
S.length $ fmap fst $ S.filter (not . (\x -> B.isSuffixOf "preferred-versions" x || B.isSuffixOf ".cabal" x || B.isSuffixOf "package.json" x) . fst) $ packageStream
#+end_src

#+RESULTS:
: 0

Reifying this as NameType:

#+begin_src haskell :results output :exports both
:i NameType
S.fold count $ fmap (bimap toNameType (=="")) $ packageStream
#+end_src

#+RESULTS:
: type NameType :: *
: data NameType
:   = CabalName | PreferredVersions | PackageJson | BadlyNamed
:   	-- Defined at src/Research/Hackage.hs:192:1
: instance Eq NameType -- Defined at src/Research/Hackage.hs:192:95
: instance Ord NameType -- Defined at src/Research/Hackage.hs:192:90
: instance Show NameType -- Defined at src/Research/Hackage.hs:192:84
: fromList [((CabalName,False),168535),((PreferredVersions,False),3115),((PreferredVersions,True),43),((PackageJson,False),132101)]

**** preferred-versions

#+begin_src haskell :results output
S.toList $ S.take 10 $ S.filter (\(x,c) -> B.isSuffixOf "preferred-versions" x && c /= "") $ packages archive
#+end_src

#+RESULTS:
: <interactive>:54:94: error:
:     Variable not in scope:
:       packages
:         :: Unfold IO Void (Either Header ByteString)
:            -> S.SerialT m (ByteString, a)

**** package-json

=package-json= content is a security/signing feature you can read about in [[https://github.com/haskell/hackage-security/blob/master/README.md][hackage-security]].

#+begin_src haskell :exports both
S.length $ S.filter ((\x -> B.isSuffixOf "package.json" x) . fst) $ packageStream
#+end_src

#+RESULTS:
: 132101


#+begin_src haskell
S.toList $ S.take 4 $ S.filter ((\x -> B.isSuffixOf "package.json" x) . fst) $ packageStream
#+end_src

#+RESULTS:
| Chart-cairo/1.0/package.json       | {"signatures":[],"signed":{"_type":"Targets","expires":null,"targets":{"<repo>/package/Chart-cairo-1.0.tar.gz":{"hashes":{"md5":"673158c2dedfb688291096fc818c5d5e","sha256":"a55c585310e65cf609c0de925d8c3616b1d8b74e803e149a184d979db086b87c"},"length":4510}},"version":0}}       |
| DistanceUnits/0.1.0.0/package.json | {"signatures":[],"signed":{"_type":"Targets","expires":null,"targets":{"<repo>/package/DistanceUnits-0.1.0.0.tar.gz":{"hashes":{"md5":"66fc96c89eaf434673f6cb8185f7b0d5","sha256":"6f82154cff8a245aeb2baee32276598bba95adca2220b36bafc37aa04d7b0f64"},"length":4473}},"version":0}} |
| Capabilities/0.1.0.0/package.json  | {"signatures":[],"signed":{"_type":"Targets","expires":null,"targets":{"<repo>/package/Capabilities-0.1.0.0.tar.gz":{"hashes":{"md5":"d6be3b7250cf729a281918ebb769fa33","sha256":"0434c5659c3f893942159bde4bd760089e81a3942f799010d04bd5bee0f6a559"},"length":6255}},"version":0}}  |
| Chart-diagrams/1.0/package.json    | {"signatures":[],"signed":{"_type":"Targets","expires":null,"targets":{"<repo>/package/Chart-diagrams-1.0.tar.gz":{"hashes":{"md5":"59bc95baee048eb74a1d104750c88e2d","sha256":"41beed8d265210f9ecd7488dfa83b76b203522d45425fd84b5943ebf84af17b5"},"length":1606758}},"version":0}} |

**** .cabal

#+begin_src haskell :exports both
S.length $ S.filter ((\x -> B.isSuffixOf ".cabal" x) . fst) $ packageStream
#+end_src

#+RESULTS:
: 168535

#+begin_src haskell
fmap fst <$> (S.toList $ S.take 10 $ S.filter ((\x -> B.isSuffixOf ".cabal" x) . fst) $ packageStream)
#+end_src

#+RESULTS:
| iconv/0.2/iconv.cabal | Crypto/3.0.3/Crypto.cabal | HDBC/1.0.1/HDBC.cabal | HDBC-odbc/1.0.1.0/HDBC-odbc.cabal | HDBC-postgresql/1.0.1.0/HDBC-postgresql.cabal | HDBC-sqlite3/1.0.1.0/HDBC-sqlite3.cabal | darcs-graph/0.1/darcs-graph.cabal | hask-home/2006.3.23/hask-home.cabal | hmp3/1.1/hmp3.cabal | lambdabot/4.0/lambdabot.cabal |

*** .cabal paths

So there is about 160k cabal files to R&D ...

malformed version number check

#+begin_src haskell :results output

mErrs <- S.fold (collect fst snd) $ S.filter (isLeft . snd) $ fmap (second (parseVersion . C.pack)) $ fmap (fromRight undefined) $ S.filter isRight $ fmap (Research.Hackage.parsePath . fst) $ S.filter ((==CabalName) . toNameType . fst) packageStream

length mErrs

#+end_src

#+RESULTS:
: > 0


Total number of names

#+begin_src haskell :exports both
t1 <- S.fold (collect fst snd) $ fmap (second (fromRight undefined)) $ S.filter (isRight . snd) $ fmap (second (parseVersion . C.pack)) $ fmap (fromRight undefined) $ S.filter isRight $ fmap (Research.Hackage.parsePath . fst) $ S.filter ((==CabalName) . toNameType . fst) packageStream

length t1
#+end_src

#+RESULTS:
: > 17055

Average number of versions:

#+begin_src haskell :results output :exports both
 fromIntegral (sum $ Map.elems $ length <$> t1) / fromIntegral (length t1)
#+end_src

#+RESULTS:
: 9.658348979468233


All of the latest cabal files have content:

#+begin_src haskell :exports both
latest = Map.map maximum t1
length $ Map.toList $ Map.filter (==[]) latest
#+end_src

#+RESULTS:
: 0

** latest versions

#+begin_src haskell :exports both
lcf <- latestCabalFiles
length $ Map.toList lcf
#+end_src

#+RESULTS:
: 16511

** field parsing errors

field errors

#+begin_src haskell :exports both
fmap (\x -> C.pack (fst x) <> "-" <> toVer (fst (snd x))) $ Map.toList $ Map.filter (isLeft . readFields . snd) lcf
#+end_src

#+RESULTS:
| DSTM-0.1.2 | control-monad-exception-mtl-0.10.3 | ds-kanren-0.2.0.1 | metric-0.2.0 | phasechange-0.1 | smartword-0.0.0.5 |

** busting up cabal files into fields

valid cabal files with ok parsing of all fields:

#+begin_src haskell :exports both
vlcs <- validLatestCabals
:t vlcs
length vlcs
#+end_src

#+RESULTS:
: 17049

*** field counts across all files

#+begin_src haskell
import Data.Ord
fmap (take 10 . List.sortOn (Down . snd) . Map.toList) $ S.fold count $ S.fromList $ fmap names $ mconcat $ fmap snd $ Map.toList $ fmap snd vlcs
#+end_src

#+RESULTS:
: <interactive>:32:7: error:
:     Ambiguous occurrence ‘take’
:     It could refer to
:        either ‘Prelude.take’,
:               imported from ‘Prelude’ at src/Research/Hackage.hs:14:8-23
:               (and originally defined in ‘GHC.List’)
:            or ‘FlatParse.Basic.take’,
:               imported from ‘FlatParse.Basic’ at src/Research/Hackage.hs:83:1-22
:               (and originally defined in ‘FlatParse.Basic.Base’)



*** authors

#+begin_src haskell
fmap (take 10 . List.sortOn (Down . snd) . Map.toList) $ S.fold count $ S.fromList $ mconcat $ fmap authors $ fmap snd $ Map.toList $ fmap snd vlcs
#+end_src

#+RESULTS:
| Brendan Hay                                        | 333 |
| Nikita Volkov <nikita.y.volkov@mail.ru>            | 147 |
| Tom Sydney Kerckhove                               | 118 |
| Henning Thielemann <haskell@henning-thielemann.de> | 104 |
| Andrew Martin                                      | 103 |
| Edward A. Kmett                                    |  99 |
| OleksandrZhabenko                                  |  89 |
| Michael Snoyman                                    |  88 |
| M Farkas-Dyck                                      |  78 |
| Vanessa McHale                                     |  78 |

** libraries

not libraries

#+begin_src haskell :exports both
Map.size $ Map.filter ((0==) . length) $ fmap (catMaybes . fmap (sec "library") . snd) vlcs
#+end_src

#+RESULTS:
: 1743

multiple libraries

#+begin_src haskell :exports both
Map.size $ Map.filter ((>1) . length) $ fmap (catMaybes . fmap (sec "library") . snd) vlcs
#+end_src

#+RESULTS:
: 79

Multiple libraries are usually "internal" libraries that can only be used inside the cabal file.

#+begin_src haskell :results output
take 10 $ Map.toList $ Map.filter (\x -> x/=[[]] && x/=[] && listToMaybe x /= Just []) $ fmap (fmap (fmap secName) . fmap fst . catMaybes . fmap (sec "library") . snd) vlcs
#+end_src

#+RESULTS:
: [("LiterateMarkdown",[[("name","converter")]]),("attoparsec",[[("name","attoparsec-internal")],[]]),("balkon",[[("name","balkon-internal")],[]]),("buffet",[[("name","buffet-internal")]]),("cabal-fmt",[[("name","version-interval")],[("name","cabal-fmt-internal")]]),("cuckoo",[[("name","random-internal")],[]]),("dhrun",[[("name","dhrun-lib")]]),("dns",[[("name","dns-internal")],[]]),("escoger",[[("name","escoger-lib")]]),("ghc-plugs-out",[[("name","no-op-plugin")],[("name","undefined-init-plugin")],[("name","undefined-solve-plugin")],[("name","undefined-stop-plugin")],[("name","call-count-plugin")]])]


common stanzas

#+begin_src haskell :exports both
length $ Map.toList $ Map.filter (/=[]) $ fmap (catMaybes . fmap (sec "common")) $ fmap snd vlcs
#+end_src

#+RESULTS:
: 737

valid cabal files that have a library section:

#+begin_src haskell :exports both
vlibs <- Map.delete "acme-everything" <$> validLatestLibs
Map.size vlibs
#+end_src

#+RESULTS:
: 15305

** dependencies

Total number of build dependencies in library stanzas and in common stanzas:

#+begin_src haskell :results output :exports both
sum $ fmap snd $ Map.toList $ fmap (sum . fmap length) $ fmap (fmap (fieldValues "build-depends")) $ Map.filter (/=[]) $ fmap (fmap snd . catMaybes . fmap (sec "library") . snd) vlibs

sum $ fmap snd $ Map.toList $ fmap (sum . fmap length) $ fmap (fmap (fieldValues "build-depends")) $ Map.filter (/=[]) $ fmap (fmap snd . catMaybes . fmap (sec "common") . snd) vlibs
#+end_src

#+RESULTS:
: 105233
: > 3440


no dependencies

#+begin_src haskell :exports both
Map.size $ Map.filter (==[]) $ fmap (rawBuildDeps . snd) $ Map.delete "acme-everything" vlcs
#+end_src

#+RESULTS:
: 1725

These are mostly parse errors from not properly parsing conditionals.

unique dependencies

#+begin_src haskell
Map.size $ fmap (fmap mconcat) $ Map.filter (/=[]) $ fmap (rawBuildDeps . snd) $ Map.delete "acme-everything" vlibs
#+end_src

#+RESULTS:
: 14779

raw build-deps example:

#+begin_src haskell :exports both
take 1 $ Map.toList $ fmap (fmap mconcat) $ Map.filter (/=[]) $ fmap (rawBuildDeps . snd) $ vlibs
#+end_src

#+RESULTS:
| 2captcha | (aeson >=1.5.6.0 && <1.6,base >=4.7 && <5,bytestring >=0.10.12.0 && <0.11,clock >=0.8.2 && <0.9,exceptions >=0.10.4 && <0.11,http-client >=0.6.4.1 && <0.7,lens >=4.19.2 && <4.20,lens-aeson >=1.1.1 && <1.2,parsec >=3.1.14.0 && <3.2,text >=1.2.4.1 && <1.3,wreq >=0.5.3.3 && <0.6 ) |

lex check:

#+begin_src haskell :exports both
S.fold count $ S.concatMap S.fromList $ fmap C.unpack $ S.concatMap S.fromList $ S.fromList $ fmap snd $ Map.toList $ fmap (fmap mconcat) $ Map.filter (/=[]) $ fmap (rawBuildDeps . snd) $ vlibs
#+end_src

#+RESULTS:
: fromList [('\t',42),(' ',572471),('&',86160),('(',486),(')',486),('*',5969),(',',92554),('-',32183),('.',140854),('0',77745),('1',63104),('2',32240),('3',20269),('4',29110),('5',22316),('6',9901),('7',9590),('8',6678),('9',6284),('<',45145),('=',78780),('>',65175),('A',259),('B',234),('C',1113),('D',474),('E',75),('F',143),('G',334),('H',809),('I',103),('J',112),('K',15),('L',502),('M',399),('N',79),('O',280),('P',422),('Q',602),('R',240),('S',544),('T',524),('U',200),('V',75),('W',73),('X',92),('Y',24),('Z',18),('^',2855),('a',73691),('b',29688),('c',35787),('d',20249),('e',109010),('f',12413),('g',16508),('h',16656),('i',52533),('j',527),('k',7435),('l',34131),('m',26121),('n',54342),('o',47497),('p',28317),('q',2380),('r',67213),('s',78990),('t',90097),('u',14024),('v',6600),('w',3782),('x',10090),('y',17960),('z',1406),('{',38),('|',1936),('}',38)]

** deps

parsing the dependencies for just the names:

#+begin_src haskell :results output :exports both
deps = fmap (fromRight undefined . parseDeps . mconcat . mconcat . rawBuildDeps . snd) vlibs
Map.size deps
sum $ Map.elems $ fmap length deps
#+end_src

#+RESULTS:
:
: 14779
: 106678

#+begin_src haskell :results output :exports both
take 3 $ Map.toList deps
#+end_src

#+RESULTS:
: [("2captcha",["aeson","base","bytestring","clock","exceptions","http-client","lens","lens-aeson","parsec","text","wreq"]),("3dmodels",["base","attoparsec","bytestring","linear","packer"]),("AAI",["base"])]

packages with the most dependencies:

#+begin_src haskell :exports both
take 20 $ List.sortOn (Down . snd) $ fmap (second length) $ Map.toList deps
#+end_src

#+RESULTS:
| yesod-platform  | 132 |
| hackport        | 127 |
| planet-mitchell | 109 |
| raaz            | 104 |
| hevm            |  84 |
| sockets         |  82 |
| btc-lsp         |  71 |
| too-many-cells  |  70 |
| ghcide          |  69 |
| pandoc          |  68 |
| cachix          |  67 |
| sprinkles       |  67 |
| emanote         |  64 |
| freckle-app     |  64 |
| pantry-tmp      |  64 |
| taffybar        |  63 |
| neuron          |  61 |
| project-m36     |  61 |
| NGLess          |  60 |
| stack           |  59 |

dependees

#+begin_src haskell :exports both
fmap (take 20) $ fmap (List.sortOn (Down . snd)) $ fmap Map.toList $ S.fold count $ S.concatMap S.fromList $ S.fromList $ fmap snd $ Map.toList deps
#+end_src

#+RESULTS:
| base                 | 14709 |
| bytestring           |  5399 |
| text                 |  4969 |
| containers           |  4712 |
| mtl                  |  3473 |
| transformers         |  3069 |
| aeson                |  2021 |
| time                 |  1932 |
| vector               |  1797 |
| directory            |  1608 |
| filepath             |  1532 |
| template-haskell     |  1456 |
| unordered-containers |  1388 |
| deepseq              |  1248 |
| lens                 |  1175 |
| binary               |   932 |
| hashable             |   930 |
| array                |   889 |
| exceptions           |   855 |
| process              |   851 |


All the dependees found:

#+begin_src haskell :exports both
bdnames <- fmap (fmap fst) $ fmap Map.toList $ S.fold count $ S.concatMap S.fromList $ S.fromList $ fmap snd $ Map.toList deps

length bdnames
#+end_src

#+RESULTS:
: > 5873

*** dependency name errors

dependees not in the cabal index:

#+begin_src haskell :results output :exports both
length $ filter (not . (`elem` (Map.keys vlibs))) bdnames

take 10 $ filter (not . (`elem` (Map.keys vlibs))) bdnames

#+end_src

#+RESULTS:
: 233
: > ["Codec-Compression-LZF","Consumer","DOM","DebugTraceHelpers","FieldTrip","FindBin","HJavaScript","HTTP-Simple","Imlib","LRU"]

excluding these:

#+begin_src haskell :results output :exports both
depsExclude = filter (not . (`elem` (Map.keys vlibs))) bdnames
vdeps = fmap (filter (not . (`elem` depsExclude))) deps
Map.size vdeps
sum $ fmap snd $ Map.toList $ fmap length vdeps
#+end_src

#+RESULTS:
:
: > 14779
: 106238

*** ToDo potential error sources

- [X] error 1 - commas can be inside braces

- [ ] error 2 - plain old dodgy depends
  acme-everything, cabal, deprecated packages

- [ ] error 3 - multiple build-depends in one stanza

- [ ] error 4 - cpp & conditionals

- [ ] error 5 - packages not on Hackage

   cardano
   "This library requires quite a few exotic dependencies from the cardano realm which aren't necessarily on hackage nor stackage. The dependencies are listed in stack.yaml, make sure to also include those for importing cardano-transactions." ~ https://raw.githubusercontent.com/input-output-hk/cardano-haskell/d80bdbaaef560b8904a828197e3b94e667647749/snapshots/cardano-1.24.0.yaml

- [ ] error 6 - internal library (only available to the main cabal library stanza)
  yahoo-prices, vector-endian, symantic-parser

Empty lists are mostly due to bad conditional parsing

 #+begin_src haskell :exports both
 Map.size $ Map.filter null deps
 #+end_src

 #+RESULTS:
 : 243

** algebraic-graphs

An (algebraic) graph of dependencies:

#+begin_src haskell :results output
depG = stars (Map.toList vdeps)
#+end_src

#+begin_src haskell
:t depG
#+end_src

#+RESULTS:
: depG :: Algebra.Graph.Graph String

#+begin_src haskell
ToGraph.preSet "folds" depG
#+end_src

#+RESULTS:
: fromList ["folds-common","mealy","online","proton"]

#+begin_src haskell
ToGraph.postSet "folds" depG
#+end_src

#+RESULTS:
: fromList ["adjunctions","base","bifunctors","comonad","constraints","contravariant","data-reify","distributive","lens","mtl","pointed","profunctors","reflection","semigroupoids","transformers","unordered-containers","vector"]

https://hackage.haskell.org/package/proton




#+begin_src haskell :results output :exports both
vertexCount depG
edgeCount depG
#+end_src

#+RESULTS:
: 14779
: 105693

** graphics

=text= package dependency example

#+begin_src haskell
 supers = upstreams "text" depG <> Set.singleton "text"
 superG = induce (`elem` (toList supers)) depG
 #+end_src

#+RESULTS:

#+begin_src haskell :file other/textdeps.svg :results output graphics file :exports results
 baseGraph = defaultGraph & attL NodeType (ID "shape") .~ Just (ID "box") & gattL (ID "rankdir") .~ Just (IDQuoted "BT")
 g <- processGraph $ toDotGraphWith UnDirected baseGraph (fmap packUTF8 superG)
 writeChartSvg "other/textdeps.svg" (graphToChart g)
 #+end_src

 #+RESULTS:
 [[file:other/textdeps.svg]]


=folds=

#+begin_src haskell
 supers = upstreams "folds" depG <> Set.singleton "folds"
 superG = induce (`elem` (toList supers)) depG
 #+end_src

 #+RESULTS:
 : <interactive>:117:2: warning: [-Wname-shadowing]
 :     This binding for ‘superG’ shadows the existing binding
 :       defined at <interactive>:110:2


#+begin_src haskell :file other/foldsdeps.svg :results output graphics file :exports results
 baseGraph = defaultGraph & attL NodeType (ID "shape") .~ Just (ID "box") & gattL (ID "rankdir") .~ Just (IDQuoted "BT")
 g <- processGraph $ toDotGraphWith UnDirected baseGraph (fmap packUTF8 superG)
 writeChartSvg "other/foldsdeps.svg" (graphToChart g)
 #+end_src

 #+RESULTS:
 [[file:other/foldsdeps.svg]]


=mealy= package dependencies

#+begin_src haskell
 supers = upstreams "mealy" depG <> Set.singleton "mealy"
 superG = induce (`elem` (toList (Set.delete "base" supers))) depG
 #+end_src

#+RESULTS:
: <interactive>:124:2: warning: [-Wname-shadowing]
:     This binding for ‘superG’ shadows the existing binding
:       defined at <interactive>:117:2

#+begin_src haskell :file other/mealy.svg :results output graphics file :exports results
 g <- processGraph $ toDotGraphWith UnDirected baseGraph (fmap packUTF8 superG)
 writeChartSvg "other/mealy.svg" (graphToChart g)
 #+end_src

 #+RESULTS:
 [[file:other/mealy.svg]]

* reference

** packages

- [[https://hackage.haskell.org/package/tar-0.5.1.1][tar: Reading, writing and manipulating ".tar" archive files.]]
- [[https://hackage.haskell.org/package/tar-conduit][tar-conduit: Extract and create tar files using conduit for streaming]]
- [[https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Prelude.html][Streamly.Prelude]]
- [[https://hackage.haskell.org/package/flatparse-0.2.2.0/docs/FlatParse-Basic.html][FlatParse.Basic]]

** other hackage parsing examples

- [[https://hackage.haskell.org/package/cabal-install-parsers-0.4.2][cabal-install-parsers]]
- [[https://github.com/J-mie6/ParsleyHaskell][ParsleyHaskell]]
- [[https://hackage.haskell.org/package/Cabal-3.6.1.0/docs/Distribution-Parsec.html#t:ParsecParser][Distribution.Parsec]]
