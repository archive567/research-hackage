* chart-hackage
          :PROPERTIES:
  :CUSTOM_ID: chart-hackage
  :END:
[[https://hackage.haskell.org/package/chart-hackage][[[https://img.shields.io/hackage/v/chart-hackage.svg]]]]
[[https://github.com/tonyday567/chart-hackage/actions?query=workflow%3Ahaskell-ci][[[https://github.com/tonyday567/chart-hackage/workflows/haskell-ci/badge.svg]]]]
[[http://packdeps.haskellers.com/reverse/chart-hackage][[[https://img.shields.io/hackage-deps/v/chart-hackage.svg]]]]

There are two main ideas in =chart-hackage=.

- Within our cabal install, there is a package index in need of cartography.

- as much as possible, develop a Haskell project in org-mode.

Inspired by [[https://dev.to/viglioni/creating-haskell-notebooks-with-org-mode-4h7][Creating Haskell notebooks with org-mode - DEV Community]]


* ToDo chart-hackage cleanup

* babel

** setup

It's all pretty fragile. ob-haskell creates an ~inf-haskell~ buffer which is not the modern Haskell repl. The prompt has to end with ~> ~.

#+begin_src haskell
:set -XOverloadedStrings
:set -Wno-type-defaults
:set prompt "> "
#+end_src

** single session

Once this is created, you can check in the ~*haskell*~ buffer to see input and output. The default is a single session.

#+begin_src haskell
x = [0..4]
#+end_src

#+RESULTS:

#+begin_src haskell
x
#+end_src

#+RESULTS:
| 0 | 1 | 2 | 3 | 4 |

babel feeds the code block in as single lines.

#+begin_src haskell
y = [0..4]
y
#+end_src

#+RESULTS:
| 0 | 1 | 2 | 3 | 4 |

** multi-line

Multi-line code blocks need ~:{~ ~:}~ wrappers.
#+begin_src haskell :post org-babel-haskell-formatter(*this*)
:{
t1 :: Bool -> Int
t1 z = case z of
        True -> 1
        False -> 0
:}

t1 True
#+end_src

#+RESULTS:

~:set +m~ doesn't work and breaks the process.

#+begin_src haskell
:set +m
f :: Bool -> Int
f z = case z of
        True -> [0..4]
        False -> [1..9]
#+end_src

#+begin_src haskell
f False
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
** org-babel-script-escape bug

This:

#+begin_src haskell
:set -XOverloadedStrings
:set -Wno-type-defaults
:set prompt "> "
#+end_src

gives an error: org-babel-script-escape expects a string

But no error on singles

#+begin_src haskell
:set -XOverloadedStrings
#+end_src

#+begin_src haskell
:set -Wno-type-defaults
#+end_src

#+RESULTS:

#+begin_src haskell
:set prompt "> "
#+end_src

#+RESULTS:
** formatter

#+name: org-babel-haskell-formatter
    #+begin_src emacs-lisp :var strr="" :exports code
      (format "%s"
              (replace-regexp-in-string
               (rx line-start
                   (+ (| alphanumeric blank "." "|" ">")))
               "" (format "%s" strr)))
    #+end_src

    #+RESULTS: org-babel-haskell-formatter
** embedding inline svg

https://emacs.stackexchange.com/questions/29871/how-to-embed-svg-output-of-org-mode-src-block-as-inline-svg-in-html-export

** image test

[[./line.svg]]


*

** bar.svg

 [[./bar.svg]]


 [[./arc.svg]]


[[./arcflags.svg]]



* packages

[[https://hackage.haskell.org/package/tar-0.5.1.1][tar: Reading, writing and manipulating ".tar" archive files.]]
[[https://hackage.haskell.org/package/tar-conduit][tar-conduit: Extract and create tar files using conduit for streaming]]
[[https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Prelude.html][Streamly.Prelude]]
[[https://hackage.haskell.org/package/flatparse-0.2.2.0/docs/FlatParse-Basic.html][FlatParse.Basic]]
